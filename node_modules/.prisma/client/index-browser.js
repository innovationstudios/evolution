
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.3.0
 * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
 */
Prisma.prismaVersion = {
  client: "6.3.0",
  engine: "acc0b9dd43eb689cbd20c9470515d719db10d0b0"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.InstanceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  connectionStatus: 'connectionStatus',
  ownerJid: 'ownerJid',
  profileName: 'profileName',
  profilePicUrl: 'profilePicUrl',
  integration: 'integration',
  number: 'number',
  businessId: 'businessId',
  token: 'token',
  clientName: 'clientName',
  disconnectionReasonCode: 'disconnectionReasonCode',
  disconnectionObject: 'disconnectionObject',
  disconnectionAt: 'disconnectionAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  creds: 'creds',
  createdAt: 'createdAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  remoteJid: 'remoteJid',
  name: 'name',
  labels: 'labels',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId',
  unreadMessages: 'unreadMessages'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  remoteJid: 'remoteJid',
  pushName: 'pushName',
  profilePicUrl: 'profilePicUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  key: 'key',
  pushName: 'pushName',
  participant: 'participant',
  messageType: 'messageType',
  message: 'message',
  contextInfo: 'contextInfo',
  source: 'source',
  messageTimestamp: 'messageTimestamp',
  chatwootMessageId: 'chatwootMessageId',
  chatwootInboxId: 'chatwootInboxId',
  chatwootConversationId: 'chatwootConversationId',
  chatwootContactInboxSourceId: 'chatwootContactInboxSourceId',
  chatwootIsRead: 'chatwootIsRead',
  instanceId: 'instanceId',
  typebotSessionId: 'typebotSessionId',
  webhookUrl: 'webhookUrl',
  status: 'status',
  sessionId: 'sessionId'
};

exports.Prisma.MessageUpdateScalarFieldEnum = {
  id: 'id',
  keyId: 'keyId',
  remoteJid: 'remoteJid',
  fromMe: 'fromMe',
  participant: 'participant',
  pollUpdates: 'pollUpdates',
  status: 'status',
  messageId: 'messageId',
  instanceId: 'instanceId'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  url: 'url',
  headers: 'headers',
  enabled: 'enabled',
  events: 'events',
  webhookByEvents: 'webhookByEvents',
  webhookBase64: 'webhookBase64',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.ChatwootScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  accountId: 'accountId',
  token: 'token',
  url: 'url',
  nameInbox: 'nameInbox',
  signMsg: 'signMsg',
  signDelimiter: 'signDelimiter',
  number: 'number',
  reopenConversation: 'reopenConversation',
  conversationPending: 'conversationPending',
  mergeBrazilContacts: 'mergeBrazilContacts',
  importContacts: 'importContacts',
  importMessages: 'importMessages',
  daysLimitImportMessages: 'daysLimitImportMessages',
  organization: 'organization',
  logo: 'logo',
  ignoreJids: 'ignoreJids',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.LabelScalarFieldEnum = {
  id: 'id',
  labelId: 'labelId',
  name: 'name',
  color: 'color',
  predefinedId: 'predefinedId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.ProxyScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  host: 'host',
  port: 'port',
  protocol: 'protocol',
  username: 'username',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  rejectCall: 'rejectCall',
  msgCall: 'msgCall',
  groupsIgnore: 'groupsIgnore',
  alwaysOnline: 'alwaysOnline',
  readMessages: 'readMessages',
  readStatus: 'readStatus',
  syncFullHistory: 'syncFullHistory',
  wavoipToken: 'wavoipToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.RabbitmqScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  events: 'events',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.SqsScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  events: 'events',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.WebsocketScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  events: 'events',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.PusherScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  appId: 'appId',
  key: 'key',
  secret: 'secret',
  cluster: 'cluster',
  useTLS: 'useTLS',
  events: 'events',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.TypebotScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  description: 'description',
  url: 'url',
  typebot: 'typebot',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ignoreJids: 'ignoreJids',
  triggerType: 'triggerType',
  triggerOperator: 'triggerOperator',
  triggerValue: 'triggerValue',
  instanceId: 'instanceId'
};

exports.Prisma.TypebotSettingScalarFieldEnum = {
  id: 'id',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  typebotIdFallback: 'typebotIdFallback',
  ignoreJids: 'ignoreJids',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.IntegrationSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  remoteJid: 'remoteJid',
  pushName: 'pushName',
  status: 'status',
  awaitUser: 'awaitUser',
  context: 'context',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId',
  parameters: 'parameters',
  botId: 'botId'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  type: 'type',
  mimetype: 'mimetype',
  createdAt: 'createdAt',
  messageId: 'messageId',
  instanceId: 'instanceId'
};

exports.Prisma.OpenaiCredsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  apiKey: 'apiKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.OpenaiBotScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  description: 'description',
  botType: 'botType',
  assistantId: 'assistantId',
  functionUrl: 'functionUrl',
  model: 'model',
  systemMessages: 'systemMessages',
  assistantMessages: 'assistantMessages',
  userMessages: 'userMessages',
  maxTokens: 'maxTokens',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  ignoreJids: 'ignoreJids',
  splitMessages: 'splitMessages',
  timePerChar: 'timePerChar',
  triggerType: 'triggerType',
  triggerOperator: 'triggerOperator',
  triggerValue: 'triggerValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  openaiCredsId: 'openaiCredsId',
  instanceId: 'instanceId'
};

exports.Prisma.OpenaiSettingScalarFieldEnum = {
  id: 'id',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  ignoreJids: 'ignoreJids',
  splitMessages: 'splitMessages',
  timePerChar: 'timePerChar',
  speechToText: 'speechToText',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  openaiCredsId: 'openaiCredsId',
  openaiIdFallback: 'openaiIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.TemplateScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  name: 'name',
  template: 'template',
  webhookUrl: 'webhookUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.DifyScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  description: 'description',
  botType: 'botType',
  apiUrl: 'apiUrl',
  apiKey: 'apiKey',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  ignoreJids: 'ignoreJids',
  splitMessages: 'splitMessages',
  timePerChar: 'timePerChar',
  triggerType: 'triggerType',
  triggerOperator: 'triggerOperator',
  triggerValue: 'triggerValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.DifySettingScalarFieldEnum = {
  id: 'id',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  ignoreJids: 'ignoreJids',
  splitMessages: 'splitMessages',
  timePerChar: 'timePerChar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  difyIdFallback: 'difyIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.EvolutionBotScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  description: 'description',
  apiUrl: 'apiUrl',
  apiKey: 'apiKey',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  ignoreJids: 'ignoreJids',
  splitMessages: 'splitMessages',
  timePerChar: 'timePerChar',
  triggerType: 'triggerType',
  triggerOperator: 'triggerOperator',
  triggerValue: 'triggerValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.EvolutionBotSettingScalarFieldEnum = {
  id: 'id',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  ignoreJids: 'ignoreJids',
  splitMessages: 'splitMessages',
  timePerChar: 'timePerChar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  botIdFallback: 'botIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.FlowiseScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  description: 'description',
  apiUrl: 'apiUrl',
  apiKey: 'apiKey',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  ignoreJids: 'ignoreJids',
  splitMessages: 'splitMessages',
  timePerChar: 'timePerChar',
  triggerType: 'triggerType',
  triggerOperator: 'triggerOperator',
  triggerValue: 'triggerValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instanceId: 'instanceId'
};

exports.Prisma.FlowiseSettingScalarFieldEnum = {
  id: 'id',
  expire: 'expire',
  keywordFinish: 'keywordFinish',
  delayMessage: 'delayMessage',
  unknownMessage: 'unknownMessage',
  listeningFromMe: 'listeningFromMe',
  stopBotFromMe: 'stopBotFromMe',
  keepOpen: 'keepOpen',
  debounceTime: 'debounceTime',
  ignoreJids: 'ignoreJids',
  splitMessages: 'splitMessages',
  timePerChar: 'timePerChar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  flowiseIdFallback: 'flowiseIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.IsOnWhatsappScalarFieldEnum = {
  id: 'id',
  remoteJid: 'remoteJid',
  jidOptions: 'jidOptions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.InstanceOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  ownerJid: 'ownerJid',
  profileName: 'profileName',
  profilePicUrl: 'profilePicUrl',
  integration: 'integration',
  number: 'number',
  businessId: 'businessId',
  token: 'token',
  clientName: 'clientName'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  creds: 'creds'
};

exports.Prisma.ChatOrderByRelevanceFieldEnum = {
  id: 'id',
  remoteJid: 'remoteJid',
  name: 'name',
  instanceId: 'instanceId'
};

exports.Prisma.ContactOrderByRelevanceFieldEnum = {
  id: 'id',
  remoteJid: 'remoteJid',
  pushName: 'pushName',
  profilePicUrl: 'profilePicUrl',
  instanceId: 'instanceId'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  id: 'id',
  pushName: 'pushName',
  participant: 'participant',
  messageType: 'messageType',
  chatwootContactInboxSourceId: 'chatwootContactInboxSourceId',
  instanceId: 'instanceId',
  typebotSessionId: 'typebotSessionId',
  webhookUrl: 'webhookUrl',
  status: 'status',
  sessionId: 'sessionId'
};

exports.Prisma.MessageUpdateOrderByRelevanceFieldEnum = {
  id: 'id',
  keyId: 'keyId',
  remoteJid: 'remoteJid',
  participant: 'participant',
  status: 'status',
  messageId: 'messageId',
  instanceId: 'instanceId'
};

exports.Prisma.WebhookOrderByRelevanceFieldEnum = {
  id: 'id',
  url: 'url',
  instanceId: 'instanceId'
};

exports.Prisma.ChatwootOrderByRelevanceFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  token: 'token',
  url: 'url',
  nameInbox: 'nameInbox',
  signDelimiter: 'signDelimiter',
  number: 'number',
  organization: 'organization',
  logo: 'logo',
  instanceId: 'instanceId'
};

exports.Prisma.LabelOrderByRelevanceFieldEnum = {
  id: 'id',
  labelId: 'labelId',
  name: 'name',
  color: 'color',
  predefinedId: 'predefinedId',
  instanceId: 'instanceId'
};

exports.Prisma.ProxyOrderByRelevanceFieldEnum = {
  id: 'id',
  host: 'host',
  port: 'port',
  protocol: 'protocol',
  username: 'username',
  password: 'password',
  instanceId: 'instanceId'
};

exports.Prisma.SettingOrderByRelevanceFieldEnum = {
  id: 'id',
  msgCall: 'msgCall',
  wavoipToken: 'wavoipToken',
  instanceId: 'instanceId'
};

exports.Prisma.RabbitmqOrderByRelevanceFieldEnum = {
  id: 'id',
  instanceId: 'instanceId'
};

exports.Prisma.SqsOrderByRelevanceFieldEnum = {
  id: 'id',
  instanceId: 'instanceId'
};

exports.Prisma.WebsocketOrderByRelevanceFieldEnum = {
  id: 'id',
  instanceId: 'instanceId'
};

exports.Prisma.PusherOrderByRelevanceFieldEnum = {
  id: 'id',
  appId: 'appId',
  key: 'key',
  secret: 'secret',
  cluster: 'cluster',
  instanceId: 'instanceId'
};

exports.Prisma.TypebotOrderByRelevanceFieldEnum = {
  id: 'id',
  description: 'description',
  url: 'url',
  typebot: 'typebot',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  triggerValue: 'triggerValue',
  instanceId: 'instanceId'
};

exports.Prisma.TypebotSettingOrderByRelevanceFieldEnum = {
  id: 'id',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  typebotIdFallback: 'typebotIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.IntegrationSessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  remoteJid: 'remoteJid',
  pushName: 'pushName',
  type: 'type',
  instanceId: 'instanceId',
  botId: 'botId'
};

exports.Prisma.MediaOrderByRelevanceFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  type: 'type',
  mimetype: 'mimetype',
  messageId: 'messageId',
  instanceId: 'instanceId'
};

exports.Prisma.OpenaiCredsOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  apiKey: 'apiKey',
  instanceId: 'instanceId'
};

exports.Prisma.OpenaiBotOrderByRelevanceFieldEnum = {
  id: 'id',
  description: 'description',
  assistantId: 'assistantId',
  functionUrl: 'functionUrl',
  model: 'model',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  triggerValue: 'triggerValue',
  openaiCredsId: 'openaiCredsId',
  instanceId: 'instanceId'
};

exports.Prisma.OpenaiSettingOrderByRelevanceFieldEnum = {
  id: 'id',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  openaiCredsId: 'openaiCredsId',
  openaiIdFallback: 'openaiIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.TemplateOrderByRelevanceFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  name: 'name',
  webhookUrl: 'webhookUrl',
  instanceId: 'instanceId'
};

exports.Prisma.DifyOrderByRelevanceFieldEnum = {
  id: 'id',
  description: 'description',
  apiUrl: 'apiUrl',
  apiKey: 'apiKey',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  triggerValue: 'triggerValue',
  instanceId: 'instanceId'
};

exports.Prisma.DifySettingOrderByRelevanceFieldEnum = {
  id: 'id',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  difyIdFallback: 'difyIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.EvolutionBotOrderByRelevanceFieldEnum = {
  id: 'id',
  description: 'description',
  apiUrl: 'apiUrl',
  apiKey: 'apiKey',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  triggerValue: 'triggerValue',
  instanceId: 'instanceId'
};

exports.Prisma.EvolutionBotSettingOrderByRelevanceFieldEnum = {
  id: 'id',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  botIdFallback: 'botIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.FlowiseOrderByRelevanceFieldEnum = {
  id: 'id',
  description: 'description',
  apiUrl: 'apiUrl',
  apiKey: 'apiKey',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  triggerValue: 'triggerValue',
  instanceId: 'instanceId'
};

exports.Prisma.FlowiseSettingOrderByRelevanceFieldEnum = {
  id: 'id',
  keywordFinish: 'keywordFinish',
  unknownMessage: 'unknownMessage',
  flowiseIdFallback: 'flowiseIdFallback',
  instanceId: 'instanceId'
};

exports.Prisma.IsOnWhatsappOrderByRelevanceFieldEnum = {
  id: 'id',
  remoteJid: 'remoteJid',
  jidOptions: 'jidOptions'
};
exports.InstanceConnectionStatus = exports.$Enums.InstanceConnectionStatus = {
  open: 'open',
  close: 'close',
  connecting: 'connecting'
};

exports.DeviceMessage = exports.$Enums.DeviceMessage = {
  ios: 'ios',
  android: 'android',
  web: 'web',
  unknown: 'unknown',
  desktop: 'desktop'
};

exports.TriggerType = exports.$Enums.TriggerType = {
  all: 'all',
  keyword: 'keyword',
  none: 'none',
  advanced: 'advanced'
};

exports.TriggerOperator = exports.$Enums.TriggerOperator = {
  contains: 'contains',
  equals: 'equals',
  startsWith: 'startsWith',
  endsWith: 'endsWith',
  regex: 'regex'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  opened: 'opened',
  closed: 'closed',
  paused: 'paused'
};

exports.OpenaiBotType = exports.$Enums.OpenaiBotType = {
  assistant: 'assistant',
  chatCompletion: 'chatCompletion'
};

exports.DifyBotType = exports.$Enums.DifyBotType = {
  chatBot: 'chatBot',
  textGenerator: 'textGenerator',
  agent: 'agent',
  workflow: 'workflow'
};

exports.Prisma.ModelName = {
  Instance: 'Instance',
  Session: 'Session',
  Chat: 'Chat',
  Contact: 'Contact',
  Message: 'Message',
  MessageUpdate: 'MessageUpdate',
  Webhook: 'Webhook',
  Chatwoot: 'Chatwoot',
  Label: 'Label',
  Proxy: 'Proxy',
  Setting: 'Setting',
  Rabbitmq: 'Rabbitmq',
  Sqs: 'Sqs',
  Websocket: 'Websocket',
  Pusher: 'Pusher',
  Typebot: 'Typebot',
  TypebotSetting: 'TypebotSetting',
  IntegrationSession: 'IntegrationSession',
  Media: 'Media',
  OpenaiCreds: 'OpenaiCreds',
  OpenaiBot: 'OpenaiBot',
  OpenaiSetting: 'OpenaiSetting',
  Template: 'Template',
  Dify: 'Dify',
  DifySetting: 'DifySetting',
  EvolutionBot: 'EvolutionBot',
  EvolutionBotSetting: 'EvolutionBotSetting',
  Flowise: 'Flowise',
  FlowiseSetting: 'FlowiseSetting',
  IsOnWhatsapp: 'IsOnWhatsapp'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
